<?php

/**
 * This is the model class for table "super".
 *
 * The followings are the available columns in table 'super':
 * @property integer $id
 * @property string $title
 * @property boolean $visible

 * @property Person $creator;
 * @property string $created_info;
 * @property string $class_name // this is a  field generated by triggers on all the child tables
 *
 * The followings are the available model relations:
 * @property Favorite[] $favorites
 * @property Log[] $logs
 * @property Post[] $posts
 */
class Super extends CActiveRecord {

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'super';
    }

    public function getGlyph() {
        return 'cloud';
    }

    public function beforeSave() {
        if (parent::beforeSave()) {
            $this->modified_stamp = date('Y-m-d H:i:s');
            return true;
        }
        return false;
    }

    public static function findChildByPk($id) {
        $class_name = Super::model()->childName($id);
        if ($class_name != 'Super') {
            $model_name = str_replace(' ', '', ucwords(str_replace('_', ' ', $class_name)));
            if (strlen(trim($model_name)) == 0)
                $model_name = 'Super';
        } else
            $model_name = $class_name;
        $model = null;
        $e = '$model = ' . $model_name . '::model()->findByPk($id);';

        if (eval($e) === false) {

            throw new Exception("Eval Failed: {$e}/{$model_name}");
        }
        return $model;
    }

    /**
     * Since 'super' is a table that other tables inherit from, this provides a false column which proved the class name of the child record
     *
     * @return string the child class name
     */
    private function childName($id) {
        $sql = 'select get_class_name(:id)';
        return Yii::app()->db->createCommand($sql)->queryScalar([':id' => $id]);
    }

    public function getClass_name() {
        return $this->childName($this->id);
    }

    /**
     * @return string the associated database table name
     */
    public function getRoute() {
        $rawname = explode('_', $this->tableName());
        $name = $rawname[0];
        for ($i = 1; $i < count($rawname);) {
            $name .= ucfirst($rawname[$i++]);
        }
        return $name;
    }

    /**
     * Creates or updates a log record indicating that the current user viewed this model.
     *
     * Typical usecase:
     * - Called by ProjectController and DocumentController actionView
     *
     * @return null
     */
    public function logView() {
        $super_id = $this->id;
        $class_name = $this->class_name;
        $person_id = Yii::app()->user->id;
        $log = Log::model()->find("super_id = :super_id AND person_id = :person_id AND model = :model AND action = 'VIEW'", array(':super_id' => $super_id, ':person_id' => $person_id, ':model' => $class_name));
        if ($log != NULL) {
            $log->log_time = date('Y-m-d H:i:s');
        } else {
            $log = new Log();
            $log->action = 'VIEW';
            $log->model = $class_name;
            $log->super_id = $super_id;
            $log->person_id = $person_id;
            $log->title = Yii::app()->user->name . " viewed $class_name:" . $this->title;
        }
        $log->save();
    }

    /**
     * Get log for this object
     * @param aray $actions ['VIEW', 'CREATE', 'CHANGE', 'DELETE']
     * @return CDataProvider
     */
    public function getLog($actions = NULL) {
        $criteria = new CDbCriteria;

        $criteria->compare('super_id', $this->id);
        $criteria->order = 'log_time DESC';

        if (isset($actions)) {
            foreach ($actions as $action) {
                $criteria->addCondition("action = '$action'", 'OR');
            }
        }
        if (isset($model_type))
            $criteria->compare('model', $model_type);


        return new CActiveDataProvider('Log', array(
            'criteria' => $criteria,
            'pagination' => Yii::app()->getController()->userData->paginationParam,
        ));
    }

    /**
     * @return information about when this record was created
     */
    public function getCreated_info() {
        $sql = "select log.log_time, person.title as who from log, person where log.person_id = person.id AND log.action = 'CREATE' AND log.super_id = :thisId";
        $out = false;
        $ar = Yii::app()->db->createCommand($sql)->queryRow(true, [':thisId' => $this->id]);
        if ($ar) {
            $out = $ar['who'];
            if (!is_null($ar['log_time'])) {
                $d = new DateTime($ar['log_time']);
                $when = $d->format('F jS, Y h:i');
                $out .= " @ $when";
            }
        }
        return $out;
    }

    /**
     * @return Person
     */
    public function getCreator() {
        $sql = "select log.person_id as who from log WHERE log.action = 'CREATE' AND log.super_id = :thisId";
        $return = null;
        $ar = Yii::app()->db->createCommand($sql)->queryRow(true, [':thisId' => $this->id]);
        if ($ar) {
            $return = Person::model()->findByPk($ar['who']);
        }
        return $return;
    }

    /**
     * @return string
     */
    public function getCreateDatetime() {
        $sql = "select log.log_time as when from log WHERE log.action = 'CREATE' AND log.super_id = :thisId";
        $return = null;
        $ar = Yii::app()->db->createCommand($sql)->queryRow(true, [':thisId' => $this->id]);
        if ($ar) {
            $return = Person::model()->findByPk($ar['when']);
        }
        return $return;
    }

    /**
     * @return information about when this record was created
     */
    public function getModified_info() {
        $sql = "select person.title as who from log, person where log.person_id = person.id AND log.action = 'CHANGE' AND log.super_id = $this->id ORDER BY log_time desc LIMIT 1";
        $out = false;
        $ar = Yii::app()->db->createCommand($sql)->queryRow([':this' => $this->id]);
        if ($ar) {
            $d = new DateTime($this->modified_stamp);
            $when = $d->format('F jS, Y h:i');
            $out = $ar['who'] . " @ $when";
        }
        return $out;
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
// NOTE: you should only define rules for those attributes that
// will receive user inputs.
        return array(
            array('title', 'required'),
            array('visible', 'safe'),
            // The following rule is used by search().
// @todo Please remove those attributes that should not be searched.
            array('id, title, visible', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
// NOTE: you may need to adjust the relation name and the related
// class name for the relations automatically generated below.
        return array(
            'favorites' => array(self::HAS_MANY, 'Favorite', 'super_id'),
            'logs' => array(self::HAS_MANY, 'Log', 'super_id'),
            'posts' => array(self::HAS_MANY, 'Post', 'super_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'title' => 'Title',
            'visible' => 'Visible',
            'class_name' => 'Class Name',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
// @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('LOWER(title)', strtolower($this->title), true);
        $criteria->compare('visible', $this->visible);


        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    /**
     * Since 'super' is a table that other tables inherit from, this provides a false column which proved the class name of the child record
     *
     * @return Super the static model class
      public function getclass_name() {
      if (isset($this->id)) {
      return Yii::app()->db->createCommand('SELECT p.relname as class_name FROM super s, pg_class p WHERE s.tableoid = p.oid AND s.id =' . $this->id)->queryScalar();
      } else {
      return null;
      }
      }
     */

    /**
     * Since 'super' is a table that other tables inherit from, this provides a false column which proved the class name of the child record
     *
     * @return boolean Whether or not the current object is in the favorite table.
     */
    public function getis_favorite() {
        $is = Favorite::model()->countByAttributes(array('super_id' => $this->id, 'person_id' => Yii::app()->user->id));
        return $is > 0 ? true : false;
    }

    /**
     * Find out if it's a user favorite or not
     *
     * @param integer $super_id primary key of the object in question.
     * @param integer $person_id primary key of the user to whom the object is beloved.
     * @return boolean Whether or not the current object is in the favorite table.
     */
    public static function isFavorite($super_id, $person_id) {
        $is = Favorite::model()->countByAttributes(array('super_id' => $super_id, 'person_id' => $person_id));
        return $is > 0 ? true : false;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Super the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

}
